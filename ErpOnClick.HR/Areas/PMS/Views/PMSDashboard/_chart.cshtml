@using ErpOnClick.DAL.Models;
@{
    List<PmsProjectTasks> tasks = Model.tasks;
    List<PmsUser> users = Model.users;
    List<PmsProjectTasks> projecttasks = Model.projecttasks;
    List<PmsProjects> projects = Model.projects;
}
<div id="main" role="main">

    <!-- #MAIN CONTENT -->
    <div>
        <div class="outer-block">
            <div class="items colBG">
                <h4>
                    PROJECT TASKS BARS
                </h4>
                <div class="clearfix margin-5"></div>
                <div style="height:350px">
                    <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                    <canvas id="chartAging" width="399" height="350" class="chartjs-render-monitor" style="display: block; width: 399px; height: 350px;"></canvas>
                </div>
            </div>
            <div class="items colSM">
                <a href="/PMS/PMSProjects/Index"><h4>Projects</h4></a>
                <div class="pull-left " style="width:50%">

                    <div class="margin-top-25">&nbsp;</div>
                    <h1 class="text-center " style=" line-height: 30px; font-size: 2em" title="Total Projects">
                        @projects.Count()
                        <small><br>@projects.Count() Total</small>
                    </h1>
                </div>
                <div class="pull-right " style="width:50%">

                    <div style="height:140px">
                        <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                        <canvas id="chartCustomers" width="200" height="140" class="chartjs-render-monitor" style="display: block; width: 200px; height: 140px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="items colBG">
                <h4>PROJECT TASKS TRACE</h4>
                <div class="clearfix margin-5"></div>
                <div style="height:350px">
                    <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                    <canvas id="chartGeneralEntries" style="display: block; width: 399px; height: 350px;" width="399" height="350" class="chartjs-render-monitor"></canvas>
                </div>
            </div>
            <div class="items colSM">

                <a href="/PMS/PMSUsers/Index"><h4>Users</h4></a>
                <div class="pull-left " style="width:50%">

                    <div class="margin-top-25">&nbsp;</div>
                    <h1 class="text-center " style="line-height:30px ; font-size:2em" title="Total Users">
                        @users.Count()
                        <small><br>@users.Where(c => c.UserRole == "Manager").Count() Managers | @users.Where(c => c.UserRole == "Developer").Count() Developers </small>
                    </h1>
                </div>
                <div class="pull-right " style="width:50%">

                    <div style="height:140px">
                        <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                        <canvas id="chartVendors" width="200" height="140" class="chartjs-render-monitor" style="display: block; width: 200px; height: 140px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="items colBG">
                <h4>PROJECT TASKS PIE</h4>
                <div class="clearfix margin-5"></div>
                <div style="height:340px">
                    <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                    <canvas id="chartServices" width="399" height="340" class="chartjs-render-monitor" style="display: block; width: 399px; height: 340px;"></canvas>
                </div>
            </div>
            <div class="items colSM">

                <a href="/PMS/PMSProjectTasks/Index"><h4>Tasks <small></small></h4></a>
                <div class="pull-left " style="width:50%">

                    <div class="margin-top-25">&nbsp;</div>
                    <h1 class="text-center " style="  line-height: 30px;
        font-size: 2em" title="Project Tasks">
                        @projecttasks.Count()
                        <small title="Pending Timesheets"><br>@projecttasks.Where(c => c.TaskStatus == "Complete").Count() Completed |@projecttasks.Where(c => c.TaskStatus != "Complete").Count() others</small>
                    </h1>
                </div>
                <div class="pull-right " style="width:50%">

                    <div style="height:140px">
                        <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                        <canvas id="chartPrf" width="200" height="140" class="chartjs-render-monitor" style="display: block; width: 200px; height: 140px;"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <style type="text/css">
            /* Chart.js */
            @@keyframes chartjs-render-animation {
                from {
                    opacity: .99
                }

                to {
                    opacity: 1
                }
            }

            .chartjs-render-monitor {
                animation: chartjs-render-animation 1ms
            }

            .chartjs-size-monitor, .chartjs-size-monitor-expand, .chartjs-size-monitor-shrink {
                position: absolute;
                direction: ltr;
                left: 0;
                top: 0;
                right: 0;
                bottom: 0;
                overflow: hidden;
                pointer-events: none;
                visibility: hidden;
                z-index: -1
            }

                .chartjs-size-monitor-expand > div {
                    position: absolute;
                    width: 1000000px;
                    height: 1000000px;
                    left: 0;
                    top: 0
                }

                .chartjs-size-monitor-shrink > div {
                    position: absolute;
                    width: 200%;
                    height: 200%;
                    left: 0;
                    top: 0
                }
        </style>
        <style>

            body {
                background-color: #e5e5e5 !important;
            }

            .colSM {
                height: 200px;
            }

            .colBG {
                height: 415px;
            }

            @@media only screen and (min-device-width: 768px) {
                .outer-block {
                    -moz-column-count: 3;
                    -webkit-column-count: 3;
                    column-count: 3;
                    -moz-column-gap: 1em;
                    -webkit-column-gap: 1em;
                    column-gap: 1em;
                }
            }

            .items {
                display: inline-block;
                margin: 0 0 1em;
                width: 100%;
                background-color: #FFF;
                padding: 10px 10px;
            }

                .items h4 {
                    font-size: 1.3em;
                    font-weight: 600;
                    color: #8bd8bd;
                    border-bottom: 2px solid whitesmoke;
                    padding-bottom: 10px;
                }

                .items h1 {
                    font-size: 5em;
                    font-weight: 500;
                    color: #9a9a9a;
                }

                .items .align-text-bottom {
                }

            .pull-left {
                float: left !important;
            }

            .pull-right {
                float: right !important;
            }

            .margin-top-25 {
                margin-top: 25px !important
            }

            h1 small {
                font-size: 18px;
                font-weight: 300;
                letter-spacing: -1px;
            }


            .card-footer {
                padding: .75rem 1.25rem;
                background-color: #4a5005 !important;
                border-top: 0 solid rgba(0,0,0,.125);
                color: white !important;
            }
        </style>

    </div>
    <!-- end row -->
    <!-- END #MAIN CONTENT -->
</div>
<script>
    $(document).ready(function () {
        initChartGeneralEntries();
        initChartServices();
        initChartVendors();
        initChartCustomers();
        initChartAging();
        initChartPrf();
    })


    function initChartGeneralEntries() {

        var ctx = document.getElementById('chartGeneralEntries').getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'line',

            // The data for our dataset
            data: {
                 labels: [
                    '@System.DateTime.Today.AddMonths(-6).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-5).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-4).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-3).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-2).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-1).ToString("MMMM")',
                    '@System.DateTime.Now.ToString("MMMM")'],
                datasets: [{
                    label: 'PROJECT TASKS TRACE',
                    backgroundColor: '#243665',
                    borderColor: '#8bd8bd',
                    data: [
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-6).ToString("MMMM")).Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-5).ToString("MMMM")).Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-4).ToString("MMMM")).Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-3).ToString("MMMM")).Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-2).ToString("MMMM")).Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-1).ToString("MMMM")).Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Now.ToString("MMMM")).Count()
        ]
                }]
            },

            // Configuration options go here
            options: {
                maintainAspectRatio: false,
            }
        });

    }


    function initChartServices() {
        var ctx = document.getElementById('chartServices').getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'pie',

            // The data for our dataset
            data: {
                 labels: [
                    '@System.DateTime.Today.AddMonths(-6).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-5).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-4).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-3).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-2).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-1).ToString("MMMM")',
                    '@System.DateTime.Now.ToString("MMMM")'],
                datasets: [{
                    label: 'PROJECT TASKS PIE',
                    backgroundColor: ['#2e4582', '#1f2d28', '#243665', '#3e5a50', '#1a2748', '#6fac97', '#3e5dad'],
                    //backgroundColor: ['#5D9CEC','#48CFAD','#A0D468','#FFCE54','#ffe500'],
                    borderColor: 'white',
                    data: [
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-6).ToString("MMMM"))?.Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-5).ToString("MMMM"))?.Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-4).ToString("MMMM"))?.Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-3).ToString("MMMM"))?.Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-2).ToString("MMMM"))?.Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-1).ToString("MMMM"))?.Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Now.ToString("MMMM"))?.Count()]
                }]
            },

            // Configuration options go here
            options: {
                maintainAspectRatio: false,
            }
        });

    }


    function initChartVendors() {
        var ctx = document.getElementById('chartVendors').getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'doughnut',

            // The data for our dataset
            data: {
                labels: ['Managers', 'Developers'],
                datasets: [{
                    label: 'Users',
                    backgroundColor: ['#243665', '#8bd8bd'],
                    borderColor: 'white',
                    data: [@users.Where(c => c.UserRole == "Manager").Count(), @users.Where(c => c.UserRole == "Developer").Count()]
                }]
            },

            // Configuration options go here
            options: {
                maintainAspectRatio: false,
            }
        });

    }



    function initChartCustomers() {
        var ctx = document.getElementById('chartCustomers').getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'doughnut',

            // The data for our dataset
            data: {
                labels: ['Total'],
                datasets: [{
                    label: 'Projects',
                    backgroundColor: ['#243665'],
                    borderColor: 'white',
                    data: [@projects.Count()]
                }]
            },

            // Configuration options go here
            options: {
                maintainAspectRatio: false,
            }
        });

    }


    function initChartPrf() {
        var ctx = document.getElementById('chartPrf').getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'doughnut',

            // The data for our dataset
            data: {
                labels: ['Completed', 'Other'],
                datasets: [{
                    label: 'Project Tasks',
                    backgroundColor: ['#243665', '#8bd8bd'],
                    borderColor: 'white',
                    data: [@projecttasks.Where(c => c.TaskStatus == "Complete").Count(), @projecttasks.Where(c => c.TaskStatus != "Complete").Count()]
                }]
            },

            // Configuration options go here
            options: {
                maintainAspectRatio: false,
            }
        });

    }


    function initChartAging() {
        var ctx = document.getElementById('chartAging').getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'bar',

            // The data for our dataset
            data: {
                labels: [
                    '@System.DateTime.Today.AddMonths(-6).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-5).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-4).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-3).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-2).ToString("MMMM")',
                    '@System.DateTime.Today.AddMonths(-1).ToString("MMMM")',
                    '@System.DateTime.Now.ToString("MMMM")'],

                datasets: [{
                    label: 'PROJECT TASKS BARS',
                    backgroundColor: ['#1f2e57', '#6fac97', '#1b484d', '#3e5a50', '#0a0f1d', '#4364bc','#7db4a1'],

                    data: [

                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-6).ToString("MMMM"))?.Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-5).ToString("MMMM"))?.Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-4).ToString("MMMM"))?.Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-3).ToString("MMMM"))?.Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-2).ToString("MMMM"))?.Count() ,
                         @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Today.AddMonths(-1).ToString("MMMM"))?.Count(),
                    @tasks.Where(a=>a.TaskCreatedDate.Value.ToString("MMMM") == System.DateTime.Now.ToString("MMMM"))?.Count()

                        ]
                }]
            },

            // Configuration options go here
            options: {
                maintainAspectRatio: false,
            }
        });

    }
</script>

